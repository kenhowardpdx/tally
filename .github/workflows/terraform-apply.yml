name: Terraform Apply

on:
  push:
    branches: [main]
    paths: ["infra/**"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "prod"
        type: choice
        options:
          - prod

concurrency:
  group: terraform-apply-prod
  cancel-in-progress: false

jobs:
  apply:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: ./infra

    steps:
      - uses: actions/checkout@v5
      - uses: aws-actions/configure-aws-credentials@v4
        if: ${{ !env.ACT }}
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: terraform-apply-${{ github.run_id }}
          aws-region: us-west-2
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - uses: actions/cache@v4
        with:
          path: ./infra/.terraform
          key: terraform-${{ hashFiles('./infra/.terraform.lock.hcl') }}

      - name: Validate
        run: |
          [ -n "$TF_VAR_environment" ] || { echo "TF_VAR_environment required"; exit 1; }
          [[ "$ACT" != "true" ]] && aws sts get-caller-identity >/dev/null
          terraform fmt -check -recursive
        env:
          TF_VAR_environment: ${{ inputs.environment || 'prod' }}

      - name: Init & Plan
        id: plan
        run: |
          if [[ "$ACT" == "true" ]]; then
            echo -e "terraform {\n  backend \"s3\" {}\n}" > backend.tf
            sed "s/__AWS_ACCOUNT_ID__/$AWS_ACCOUNT_ID/g" backend.conf > backend.conf.tmp
            terraform init -backend-config=backend.conf.tmp
            init_exit_code=$?
            if [[ $init_exit_code -ne 0 ]]; then
              echo "terraform init failed in ACT mode (exit code: $init_exit_code)"
              echo "plan_exit_code=2" >> $GITHUB_OUTPUT
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "plan_exit_code=0" >> $GITHUB_OUTPUT
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          else
            echo -e "terraform {\n  backend \"s3\" {}\n}" > backend.tf
            sed "s/__AWS_ACCOUNT_ID__/$AWS_ACCOUNT_ID/g" backend.conf > backend.conf.tmp
            terraform init -backend-config=backend.conf.tmp
            terraform validate
            set +e  # Allow plan to exit with non-zero codes
            terraform plan -out=tfplan -detailed-exitcode
            plan_exit_code=$?
            set -e  # Re-enable exit on error
            echo "plan_exit_code=$plan_exit_code" >> $GITHUB_OUTPUT
            echo "has_changes=$([[ $plan_exit_code -eq 2 ]] && echo true || echo false)" >> $GITHUB_OUTPUT
            # Exit 0 = no changes, Exit 2 = changes present, Exit 1 = error
            if [[ $plan_exit_code -eq 1 ]]; then
              echo "❌ Terraform plan failed with exit code 1"
              exit 1
            fi
          fi
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          TF_VAR_environment: ${{ inputs.environment || 'prod' }}
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Apply
        if: steps.plan.outputs.has_changes == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          if [[ "$ACT" == "true" ]]; then
            echo "🧪 DRY RUN: Would apply changes (exit code: ${{ steps.plan.outputs.plan_exit_code }})"
          else
            terraform apply -auto-approve tfplan
          fi
        env:
          TF_VAR_environment: ${{ inputs.environment || 'prod' }}
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Output
        if: success()
        run: |
          if [[ "$ACT" == "true" ]]; then
            echo "✅ ACT test complete (exit: ${{ steps.plan.outputs.plan_exit_code }}, changes: ${{ steps.plan.outputs.has_changes }})"
          elif [[ "${{ steps.plan.outputs.has_changes }}" == "true" ]]; then
            echo "✅ Applied $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            terraform output 2>/dev/null || echo "No outputs"
          else
            echo "✅ No changes needed"
          fi

      - name: Sync S3 Frontend
        if: success() && steps.plan.outputs.has_changes == 'true' && env.TF_VAR_environment == 'prod' && env.ACT != 'true'
        run: |
          bucket_name=$(terraform output -raw frontend_static_bucket_name 2>/dev/null)
          aws s3 sync ../frontend/build/ s3://$bucket_name/ --delete
        env:
          TF_VAR_environment: ${{ inputs.environment || 'prod' }}
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Cleanup
        if: failure()
        run: rm -f tfplan
