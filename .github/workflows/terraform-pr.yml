name: Terraform PR

on:
  pull_request:
    branches: [main]
    paths: ["infra/**"]

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra

    steps:
      - uses: actions/checkout@v5
      - uses: aws-actions/configure-aws-credentials@v4
        if: ${{ !env.ACT }}
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-west-2
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - uses: actions/cache@v4
        with:
          path: ./infra/.terraform
          key: terraform-${{ hashFiles('./infra/.terraform.lock.hcl') }}

      - name: Init & Validate
        run: |
          cat > backend.conf << EOF
          bucket  = "terraform-state-${{ secrets.AWS_ACCOUNT_ID }}"
          key     = "tally/prod/terraform.tfstate"
          region  = "us-west-2"
          encrypt = true
          EOF
          terraform init -backend-config=backend.conf
          terraform fmt -check -recursive
          terraform validate
        env:
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan 2>&1 | tee plan.txt
          echo "exit_code=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT
        env:
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        continue-on-error: true

      - name: Comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && !env.ACT
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('infra/plan.txt', 'utf8');
            const exitCode = '${{ steps.plan.outputs.exit_code }}';
            const status = exitCode === '0' ? '‚úÖ No changes' : 
                          exitCode === '2' ? 'üìã Changes detected' : '‚ùå Failed';

            const output = `#### Terraform Plan ${status}
            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${plan.length > 60000 ? plan.substring(0, 60000) + '\n... (truncated)' : plan}
            \`\`\`
            </details>`;

            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existing = comments.data.find(c => 
              c.user.type === 'Bot' && c.body.includes('Terraform Plan')
            );

            if (existing) {
              await github.rest.issues.updateComment({
                comment_id: existing.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

      - name: Local Output
        if: env.ACT
        run: |
          echo "Exit code: ${{ steps.plan.outputs.exit_code }}"
          cat plan.txt 2>/dev/null || echo "No plan output"

      - name: Fail Check
        if: steps.plan.outputs.exit_code == '1'
        run: exit 1
